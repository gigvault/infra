# Secure PostgreSQL Configuration for GigVault
# TLS enabled, secrets from Kubernetes secrets, restricted permissions

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: gigvault
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
  namespace: gigvault
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999  # postgres user
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: default
      containers:
      - name: postgresql
        image: postgres:16-alpine
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Postgres needs to write
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 5432
          name: postgresql
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: POSTGRES_DB
        # SSL/TLS configuration
        - name: PGSSLMODE
          value: "require"
        # Connection limits
        - name: POSTGRES_MAX_CONNECTIONS
          value: "100"
        # Logging
        - name: POSTGRES_LOG_CONNECTIONS
          value: "on"
        - name: POSTGRES_LOG_DISCONNECTIONS
          value: "on"
        - name: POSTGRES_LOG_STATEMENT
          value: "all"  # For audit purposes
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
          subPath: postgres
        - name: tmp
          mountPath: /tmp
        - name: run
          mountPath: /var/run/postgresql
        # Mount SSL certificates
        - name: db-certs
          mountPath: /etc/ssl/certs/postgres
          readOnly: true
        resources:
          limits:
            cpu: 2
            memory: 4Gi
          requests:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: tmp
        emptyDir: {}
      - name: run
        emptyDir: {}
      - name: db-certs
        secret:
          secretName: db-client-certs
          defaultMode: 0400

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: gigvault
spec:
  selector:
    app: postgresql
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgresql
  type: ClusterIP
  clusterIP: None  # Headless service for StatefulSet pattern

---
# PostgreSQL initialization ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
  namespace: gigvault
data:
  init.sql: |
    -- Enable required extensions
    CREATE EXTENSION IF NOT EXISTS pgcrypto;
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    
    -- Create databases for each service
    CREATE DATABASE IF NOT EXISTS gigvault_ca;
    CREATE DATABASE IF NOT EXISTS gigvault_ra;
    CREATE DATABASE IF NOT EXISTS gigvault_keymgr;
    CREATE DATABASE IF NOT EXISTS gigvault_enroll;
    CREATE DATABASE IF NOT EXISTS gigvault_ocsp;
    CREATE DATABASE IF NOT EXISTS gigvault_crl;
    CREATE DATABASE IF NOT EXISTS gigvault_policy;
    CREATE DATABASE IF NOT EXISTS gigvault_auth;
    CREATE DATABASE IF NOT EXISTS gigvault_audit;
    CREATE DATABASE IF NOT EXISTS gigvault_notify;
    
    -- Harden PostgreSQL security
    ALTER DATABASE template1 IS_TEMPLATE = false;
    DROP DATABASE template1;
    CREATE DATABASE template1 WITH TEMPLATE = template0 ENCODING = 'UTF8';
    ALTER DATABASE template1 IS_TEMPLATE = true;
    
    -- Revoke public schema privileges
    REVOKE ALL ON SCHEMA public FROM PUBLIC;
    GRANT ALL ON SCHEMA public TO gigvault;

